AWSTemplateFormatVersion: '2010-09-09'
Description: 'My First AWS VPC'

Resources:
    MyVPC:
        Type: 'AWS::EC2::VPC'  
        Properties:
            CidrBlock: '172.16.0.0/16'
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: MyVPC

# Public Subnet in AZ 1
    PublicSubnet1A:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref MyVPC
            CidrBlock: '172.16.1.0/24'
            # Deploy the resource in the 1st availability zone of the current region
            AvailabilityZone: !Select [0, !GetAZs ''] 
            MapPublicIpOnLaunch: true # Assign a public IP to any EC2 launched in the subnet
            Tags: 
                - Key: Name
                  Value: PublicSubnet1A

# App Private Subnet in AZ 1
    AppPrivateSubnet1A:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref MyVPC
            CidrBlock: '172.16.2.0/24'
            AvailabilityZone: !Select [0, !GetAZs '']
            Tags:
                - Key: Name
                  Value: AppPrivateSubnet1A

# Database Private Subnet in AZ 1
    DataPrivateSubnet1A:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref MyVPC   
            CidrBlock: '172.16.3.0/24'
            AvailabilityZone: !Select [0, !GetAZs '']
            Tags: 
                - Key: Name
                  Value: DataPrivateSubnet1A
    
# Public Subnet in AZ 2
    PublicSubnet1B:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref MyVPC
            CidrBlock: '172.16.4.0/24'
            AvailabilityZone: !Select [1, !GetAZs '']
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: PublicSubnet1B

# App Private Subnet in AZ 2                  
    AppPrivateSubnet1B:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref MyVPC
            CidrBlock: '172.16.5.0/24'
            AvailabilityZone: !Select [1, !GetAZs '']
            Tags:
                - Key: Name
                  Value: AppPrivateSubnet1B

# Database Private Subnet in AZ 2
    DataPrivateSubnet1B:
        Type: 'AWS::EC2::Subnet'
        Properties:
            VpcId: !Ref MyVPC
            CidrBlock: '172.16.6.0/24'
            AvailabilityZone: !Select [1, !GetAZs '']
            Tags:
                - Key: Name
                  Value: DataPrivateSubnet1b  

# Internet Gateway
    InternetGateway: 
        Type: 'AWS::EC2::InternetGateway'
        Properties: 
            Tags:
            - Key: Name
              Value: myVPC-IGW            

# Attach Internet Gateway to VPC
    AttachGateway:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        Properties:
            VpcId: !Ref MyVPC
            InternetGatewayId: !Ref InternetGateway

# Create Public Route Table
    PublicRouteTable:
        Type: 'AWS::EC2::RouteTable'
        Properties:
            VpcId: !Ref MyVPC
            Tags:
                - Key: Name
                  Value: PublicRouteTable

# Create Public Route To The Internet
    PublicRoute: 
        Type: 'AWS::EC2::Route'
        DependsOn: AttachGateway
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId: !Ref InternetGateway

# Associate PublicSubnet1A with the Route Table
    PublicSubnet1ARouteAssociation: 
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        Properties: 
            SubnetId: !Ref PublicSubnet1A
            RouteTableId: !Ref PublicRouteTable

# Bastion Host EC2
    BastionHost:
        Type: 'AWS::EC2::Instance'
        Properties: 
            InstanceType: t3.micro
            KeyName: bastion
            ImageId: ami-071ec74a9abd8fec2
            SubnetId: !Ref PublicSubnet1A
            SecurityGroupIds: 
                - !Ref BastionSG
            Tags:
                - Key: Name
                  Value: BastionHost

# Bastion Security Group - Which PC is allowed to connect to the Bastion Host?
    BastionSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: 'Enable SSH Access'
            VpcId: !Ref MyVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: 102.223.57.24/32

# AppInstance1A
    AppInstance1A:
        Type: 'AWS::EC2::Instance'
        Properties:
            InstanceType: t3.micro
            KeyName: bastion
            ImageId: ami-071ec74a9abd8fec2
            SubnetId: !Ref AppPrivateSubnet1A
            SecurityGroupIds: 
                - !Ref App1ASG
            Tags:
                - Key: Name
                  Value: AppInstance1A

# AppInstance1A Security Group 
    App1ASG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: 'Allow SSH from Bastion'
            VpcId: !Ref MyVPC
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  SourceSecurityGroupId: !Ref BastionSG

# AppInstance1B
    AppInstance1B:
        Type: 'AWS::EC2::Instance'
        Properties:
            InstanceType: t3.micro
            ImageId: ami-071ec74a9abd8fec2
            SubnetId: !Ref AppPrivateSubnet1B
            SecurityGroupIds: 
                - !Ref App1BSG
            Tags:
                - Key: Name
                  Value: AppInstance1B

# AppInstance1B Security Group 
    App1BSG:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: 'Allow ICMP Ping from AppInstance1A'
            VpcId: !Ref MyVPC
            SecurityGroupIngress:
                - IpProtocol: icmp
                  FromPort: -1
                  ToPort: -1
                  SourceSecurityGroupId: !Ref App1ASG